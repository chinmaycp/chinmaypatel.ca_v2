@use "../styles/variables" as *;
@use "../styles/mixins" as *;
@use "sass:color";

.hero {
	min-height: calc(
		100vh - #{$navbar-height}
	); // Full viewport height minus navbar
	display: flex;
	align-items: center;
	justify-content: center;
	padding: 2rem; // Reduce default section padding for hero if needed
	background-color: $background-color; // Or a subtle gradient/image

	&__content {
		display: flex;
		flex-direction: column; // Default stack text over photo on small screens
		align-items: center;
		text-align: center;
		gap: 3rem; // Space between text and photo (if present)
		max-width: 1100px; // Limit content width

		// Layout changes for larger screens (side-by-side)
		@media (min-width: 768px) {
			flex-direction: row;
			text-align: left;
			gap: 4rem;
		}
	}

	&__text {
		flex: 1; // Allow text block to grow
	}

	&__headline {
		font-size: 2.5rem; // Adjust size as needed
		font-weight: 600; // Semi-bold often looks good
		margin-bottom: 1.5rem;
		line-height: 1.3;
		color: #1d1d1f; // Darker text, similar to Apple's body text

		@media (min-width: 768px) {
			font-size: 3.5rem;
		}
	}

	&__intro {
		font-size: 1.1rem;
		margin-bottom: 2rem;
		color: #555; // Slightly lighter text for intro
		max-width: 600px; // Limit intro text width for readability

		@media (min-width: 768px) {
			font-size: 1.2rem;
			margin-bottom: 2.5rem;
		}
	}

	&__cta {
		display: flex;
		flex-direction: column; // Stack buttons on small screens
		align-items: center;
		gap: 1rem;

		@media (min-width: 480px) {
			flex-direction: row; // Side-by-side buttons on larger screens
			justify-content: center; // Center buttons if text is centered
		}

		@media (min-width: 768px) {
			justify-content: flex-start; // Align buttons left if text is left-aligned
		}
	}

	&__photo-container {
		flex-shrink: 0; // Prevent photo container from shrinking
		width: 250px; // Adjust size as desired
		height: 250px;
		border-radius: 50%; // Make it circular
		overflow: hidden; // Clip the image to the circle
		position: relative; // Needed for potential overlays or effects

		@media (min-width: 768px) {
			width: 300px;
			height: 300px;
		}
		@media (min-width: 992px) {
			width: 350px;
			height: 350px;
		}
	}

	&__photo {
		display: block;
		width: 100%;
		height: 100%;
		object-fit: cover; // Ensure image covers the circle nicely
		opacity: 0.5; // Start semi-transparent
		filter: blur(3px); // Start slightly blurred
		transition: opacity 0.4s ease-in-out, filter 0.4s ease-in-out;
		cursor: pointer; // Indicate interactivity

		// Hover effect - applied when hovering the container
		.hero__photo-container:hover & {
			opacity: 1;
			filter: blur(0);
		}
	}
}

// Basic Button Styles (Consider moving to a components/_button.scss later)
.btn {
	display: inline-block;
	padding: 0.8rem 1.8rem;
	border-radius: 20px; // Rounded corners
	text-decoration: none;
	font-weight: 500;
	font-size: 0.95rem;
	transition: all 0.3s ease;
	cursor: pointer;
	border: none;
	text-align: center;

	&--primary {
		background-color: $primary-color;
		color: #fff;

		&:hover {
			background-color: color.adjust($primary-color, $lightness: 8%);
			color: #fff;
			text-decoration: none;
		}
	}

	&--secondary {
		background-color: transparent;
		color: $primary-color;
		border: 1px solid $primary-color;

		&:hover {
			background-color: $primary-color;
			color: #fff;
			text-decoration: none;
		}
	}
}
